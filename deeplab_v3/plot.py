import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 原始混淆矩阵数据
confusion_matrix = np.array([
    [4291122, 0, 0, 56036, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 1758, 0, 0, 0, 771, 0],
    [0, 1339187, 0, 0, 4064, 0, 8434, 5, 31024, 0, 5, 0, 0, 12759, 45263, 0, 0, 0, 0, 0],
    [0, 0, 4240977, 145, 1052, 181, 0, 0, 0, 1280, 42, 1954, 0, 0, 30225, 1501, 0, 0, 0, 0],
    [499, 0, 0, 2585215, 0, 0, 18211, 0, 0, 0, 0, 2174, 0, 6176, 0, 0, 0, 0, 0, 0],
    [0, 2866, 0, 0, 3964365, 1202, 3790, 15, 0, 14785, 0, 0, 763, 54858, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 67966, 0, 9046256, 21274, 0, 0, 0, 0, 0, 0, 1379, 0, 0, 0, 686, 0, 0],
    [44, 9629, 0, 13040, 6066, 4350, 7331760, 0, 0, 17, 0, 146, 0, 22425, 5455, 0, 0, 0, 0, 0],
    [0, 0, 66033, 0, 1921, 0, 0, 10939125, 10975, 0, 258, 124443, 0, 102856, 215, 0, 25334, 0, 619, 0],
    [0, 0, 0, 0, 53, 0, 160, 2641, 3088235, 0, 61478, 6981, 54, 22858, 1929, 0, 523080, 0, 418, 0],
    [0, 0, 0, 3, 0, 0, 4320, 2632, 0, 5829403, 0, 25954, 201962, 93, 10944, 0, 968, 0, 0, 0],
    [0, 0, 0, 0, 5435, 0, 0, 163844, 0, 4698742, 41, 35571, 3804, 0, 395, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 7826, 69904, 25871, 0, 9832372, 151853, 790, 63602, 0, 324, 31807, 0, 0, 0],
    [0, 0, 0, 0, 309, 0, 0, 541, 240935, 0, 4801, 5110801, 30762, 0, 0, 0, 0, 0, 0, 0],
    [0, 3081, 0, 12520, 0, 0, 0, 55253, 0, 0, 0, 0, 0, 54734, 0, 0, 0, 0, 0, 0],
    [2105, 27325, 2193, 6521, 5841, 19905, 88512, 637, 105441, 80520, 24376, 186784, 24090, 92866, 25889918, 4048, 541, 83979, 16410, 904],
    [0, 629, 722, 304, 1555, 0, 158, 101, 553, 0, 3083, 0, 228, 2270930, 0, 6993, 0, 49, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 243, 8369, 1894, 0, 44428, 0, 609, 2822, 0, 3678431, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 991, 437003, 0, 6884, 2061, 0, 102170, 1232, 0, 5940039, 0, 16866, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 943, 0, 0, 0, 8433022, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 380, 0, 0, 0, 0, 3034801]
])

# 归一化混淆矩阵
row_sums = confusion_matrix.sum(axis=1, keepdims=True)
normalized_confusion_matrix = confusion_matrix / row_sums
normalized_confusion_matrix = np.nan_to_num(normalized_confusion_matrix)  # 将NaN替换为0

# 定义一个函数，只显示大于某个阈值的值
threshold = 0.1
annot_matrix = np.where(normalized_confusion_matrix > threshold, normalized_confusion_matrix, "")

# 类别标签（根据实际情况修改）
class_labels = [f"Class {i+1}" for i in range(confusion_matrix.shape[0])]

# 绘制归一化的混淆矩阵
plt.figure(figsize=(15, 12))
sns.heatmap(normalized_confusion_matrix, annot=True, fmt=".1f", cmap="Blues", xticklabels=class_labels, yticklabels=class_labels, linewidths=.5, annot_kws={"size": 10})
plt.title("Normalized Confusion Matrix")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.tight_layout()
plt.show()
